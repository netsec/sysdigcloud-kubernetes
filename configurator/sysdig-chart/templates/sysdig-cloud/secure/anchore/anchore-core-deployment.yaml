apiVersion: apps/v1
kind: Deployment
metadata:
  name: sysdigcloud-anchore-core
  namespace: {{ .Values.namespace }}
  labels:
    app: sysdigcloud
    role: anchore-core
  annotations:
    version: {{ .Values.sysdig.anchoreVersion | quote }}
spec:
  # Replicas can be scaled up as needed.
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: sysdigcloud
      role: anchore-core
  template:
    metadata:
      labels:
        app: sysdigcloud
        role: anchore-core
    spec:
      imagePullSecrets:
        - name: sysdigcloud-pull-secret
      volumes:
        - name: config-volume
          configMap:
            name: sysdigcloud-anchore-core
        # If you need to import self-signed SSL certs (e.g. because there's a proxy
        # to the standard vulnerabilities feed service, or images are hosted on
        # internal registries), create a secret named 'sysdigcloud-anchore-custom-certs'
        # as in
        #    kubectl ... create secret generic sysdigcloud-anchore-custom-certs
        #    --from-file=/path/to/custom-cert1 --from_file=/path/to/custom-cert2 ...
        # then uncomment this:
        # - name: custom-certs-volume
        #   secret:
        #     secretName: sysdigcloud-anchore-custom-certs
      containers:
      - name: anchore-core
        image: {{ .Values.airgapped_registry_name | default "quay.io" }}/sysdig/anchore:{{ .Values.sysdig.anchoreVersion }}
        imagePullPolicy:
        resources:
          {}
        ports:
        - containerPort: 8228
          name: external-api
        - containerPort: 8083
          name: queue-service
        - containerPort: 8338
          name: webhook-service
        - containerPort: 8082
          name: catalog
        - containerPort: 8087
          name: policy-engine
        env:
        - name: ANCHORE_DB
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.dbname
        - name: ANCHORE_DB_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.endpoint
        - name: ANCHORE_DB_USER
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.user
        - name: ANCHORE_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sysdigcloud-anchore
              key: anchore.db.password
        - name: ANCHORE_IO_USER
          value: ""
        - name: ANCHORE_IO_PASSWORD
          value: ""
        - name: ANCHORE_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sysdigcloud-anchore
              key: anchore.admin.password
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ANCHORE_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ANCHORE_POLICY_ENGINE_EVALUATION_CACHE_ENABLED
          value: "false"
        - name: ANCHORE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # See comments in sysdigcloud/config.yaml on how to specify https_proxy and no_proxy:
        # https://github.com/draios/sysdigcloud-kubernetes/blob/master/sysdigcloud/config.yaml
        # - name: https_proxy
        #   valueFrom:
        #     configMapKeyRef:
        #       name: sysdigcloud-config
        #       key: anchore.core.https.proxy
        # - name: no_proxy
        #   valueFrom:
        #     configMapKeyRef:
        #       name: sysdigcloud-config
        #       key: anchore.no_proxy
        volumeMounts:
        - name: config-volume
          mountPath: /config
        # Only needed if the engine needs to import self-signed SSL certs
        # (see comment above)
        # - name: custom-certs-volume
        #   mountPath: /custom-certs
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
