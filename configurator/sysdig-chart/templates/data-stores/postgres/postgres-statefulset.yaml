apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sysdigcloud-postgresql
  namespace: {{ .Values.namespace }}
  labels:
    app: sysdigcloud
    role: postgresql
spec:
  serviceName: sysdigcloud-postgresql
  replicas: 1
  selector:
    matchLabels:
      app: sysdigcloud
      role: postgresql
  template:
    metadata:
      labels:
        app: sysdigcloud
        role: postgresql
    spec:
      imagePullSecrets:
        - name: sysdigcloud-pull-secret
      containers:
      - name: postgresql
        image: {{ .Values.airgapped_registry_name | default "quay.io" }}/sysdig/postgres:10.6-alpine.1
        resources: {}
        env:
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.user
          # Required for pg_isready in the health probes.
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.user
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: sysdigcloud-config
              key: anchore.db.dbname
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sysdigcloud-anchore
              key: anchore.db.password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          timeoutSeconds: 3
          periodSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data/pgdata
          subPath: "postgresql-db"
{{- if eq .Values.storageClassProvisioner "hostPath" }}
      volumes:
        - name: data
          hostPath:
            type: DirectoryOrCreate
            path: /var/lib/postgresql/data/pgdata
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 60Gi
      storageClassName: {{ .Values.storageClassName }}
{{- end }}
